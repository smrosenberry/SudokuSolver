package sudoku;

class PuzzleData 
{

    public enum PuzzleDifficulty { EMPTY         ( "Empty"          ),
                                   EASY          ( "Easy"           ),
                                   MEDIUM        ( "Medium"         ),
                                   HARD          ( "Hard"           ),
                                   EVIL          ( "Evil"           ),
                                   EASTER_MONSTER( "Easter Monster" );

    private String strValue;

    PuzzleDifficulty ( String strValue )
    {
        this.strValue = strValue;
    } 
     
    public String toString()
    {
        return( this.strValue );
    }

    static public PuzzleDifficulty getValue( String strValue )
    {
        // TODO Use Enum.valueOf()
        for( PuzzleDifficulty difficulty : PuzzleDifficulty.values() )
        {
            if( difficulty.strValue.equals( strValue ) )
            {
                return( difficulty );
            }
        } 
        
        return( null );
        
    }

    };

    //
    // INITIAL PUZZLE DATA
    //

    static int[][] emptyValues  =
            //   1  2  3    4  5  6    7  8  9
            // |-------------------------------|
            {  { 0, 0, 0,   0, 0, 0,   0, 0, 0 },  // 1
               { 0, 0, 0,   0, 0, 0,   0, 0, 0 },  // 2
               { 0, 0, 0,   0, 0, 0,   0, 0, 0 },  // 3
            // |-------------------------------|
               { 0, 0, 0,   0, 0, 0,   0, 0, 0 },  // 4
               { 0, 0, 0,   0, 0, 0,   0, 0, 0 },  // 5
               { 0, 0, 0,   0, 0, 0,   0, 0, 0 },  // 6
            // |-------------------------------|
               { 0, 0, 0,   0, 0, 0,   0, 0, 0 },  // 7
               { 0, 0, 0,   0, 0, 0,   0, 0, 0 },  // 8
               { 0, 0, 0,   0, 0, 0,   0, 0, 0 },  // 9
            // |-------------------------------|
            };

    static int[][] easyValues  =
            //   1  2  3    4  5  6    7  8  9
            // |-------------------------------|
            {  { 0, 3, 5,   0, 0, 1,   9, 0, 2 },  // 1
               { 0, 4, 1,   0, 0, 3,   0, 6, 5 },  // 2
               { 0, 0, 8,   0, 2, 5,   0, 3, 0 },  // 3
            // |-------------------------------|
               { 5, 0, 4,   7, 0, 0,   0, 0, 0 },  // 4
               { 0, 1, 0,   0, 0, 0,   0, 7, 0 },  // 5
               { 0, 0, 0,   0, 0, 2,   6, 0, 4 },  // 6
            // |-------------------------------|
               { 0, 5, 0,   3, 9, 0,   4, 0, 0 },  // 7
               { 3, 6, 0,   2, 0, 0,   5, 1, 0 },  // 8
               { 4, 0, 2,   1, 0, 0,   7, 9, 0 },  // 9
            // |-------------------------------|
            };

    static int[][] mediumValues =
            //   1  2  3    4  5  6    7  8  9
            // |-------------------------------|
            {  { 9, 0, 0,   7, 0, 0,   5, 0, 0 },  // 1
               { 8, 7, 0,   0, 2, 0,   1, 0, 0 },  // 2
               { 0, 4, 0,   5, 0, 0,   0, 9, 0 },  // 3
            // |-------------------------------|
               { 0, 5, 4,   0, 0, 6,   0, 0, 3 },  // 4
               { 0, 0, 0,   0, 3, 0,   0, 0, 0 },  // 5
               { 2, 0, 0,   8, 0, 0,   4, 7, 0 },  // 6
            // |-------------------------------|
               { 0, 2, 0,   0, 0, 8,   0, 6, 0 },  // 7
               { 0, 0, 3,   0, 9, 0,   0, 5, 7 },  // 8
               { 0, 0, 9,   0, 0, 7,   0, 0, 8 },  // 9
            // |-------------------------------|
            };

    static int[][] hardValues =
            //   1  2  3    4  5  6    7  8  9
            // |-------------------------------|
            {  { 0, 1, 3,   0, 0, 6,   0, 0, 0 },  // 1
               { 8, 0, 0,   2, 0, 0,   0, 6, 0 },  // 2
               { 0, 0, 9,   5, 0, 8,   0, 0, 0 },  // 3
            // |-------------------------------|
               { 7, 0, 0,   6, 0, 0,   0, 5, 0 },  // 4
               { 0, 0, 4,   0, 0, 0,   8, 0, 0 },  // 5
               { 0, 8, 0,   0, 0, 7,   0, 0, 9 },  // 6
            // |-------------------------------|
               { 0, 0, 0,   9, 0, 5,   7, 0, 0 },  // 7
               { 0, 6, 0,   0, 0, 4,   0, 0, 1 },  // 8
               { 0, 0, 0,   7, 0, 0,   6, 4, 0 },  // 9
            // |-------------------------------|
            };

    static int[][] evilValues =
            //   1  2  3    4  5  6    7  8  9
            // |-------------------------------|
            {  { 0, 0, 0,   9, 0, 0,   0, 0, 1 },  // 1
               { 0, 0, 3,   0, 0, 5,   6, 0, 0 },  // 2
               { 8, 0, 0,   0, 6, 3,   0, 7, 9 },  // 3
            // |-------------------------------|
               { 0, 2, 0,   0, 0, 0,   0, 0, 0 },  // 4
               { 4, 0, 0,   7, 0, 9,   0, 0, 3 },  // 5
               { 0, 0, 0,   0, 0, 0,   0, 2, 0 },  // 6
            // |-------------------------------|
               { 9, 1, 0,   3, 8, 0,   0, 0, 4 },  // 7
               { 0, 0, 2,   5, 0, 0,   1, 0, 0 },  // 8
               { 5, 0, 0,   0, 0, 1,   0, 0, 0 },  // 9
            // |-------------------------------|
            };

    static int[][] easterMonsterValues =
            //   1  2  3    4  5  6    7  8  9
            // |-------------------------------|
            {  { 1, 0, 0,   0, 0, 0,   0, 0, 2 },  // 1
               { 0, 9, 0,   4, 0, 0,   0, 5, 0 },  // 2
               { 0, 0, 6,   0, 0, 0,   7, 0, 0 },  // 3
            // |-------------------------------|
               { 0, 5, 0,   9, 0, 3,   0, 0, 0 },  // 4
               { 0, 0, 0,   0, 7, 0,   0, 0, 0 },  // 5
               { 0, 0, 0,   8, 5, 0,   0, 4, 0 },  // 6
            // |-------------------------------|
               { 7, 0, 0,   0, 0, 0,   6, 0, 0 },  // 7
               { 0, 3, 0,   0, 0, 9,   0, 8, 0 },  // 8
               { 0, 0, 2,   0, 0, 0,   0, 0, 1 },  // 9
            // |-------------------------------|
            };

/* EVIL - Billy's guesses
    static int[][] inputValues =
            //   1  2  3    4  5  6    7  8  9
            // |-------------------------------|
            {  { 0, 0, 0,   9, 0, 0,   0, 0, 1 },  // 1
               { 0, 0, 3,   0, 0, 5,   6, 0, 0 },  // 2
               { 8, 0, 0,   0, 6, 3,   0, 7, 9 },  // 3
            // |-------------------------------|
               { 0, 2, 0,   0, 0, 0,   0, 0, 0 },  // 4
               { 4, 0, 0,   7, 0, 9,   0, 0, 3 },  // 5
               { 0, 0, 0,   0, 0, 0,   0, 2, 0 },  // 6
            // |-------------------------------|
               { 9, 1, 6,   3, 8, 2,   7, 5, 4 },  // 7
               { 0, 0, 2,   5, 0, 0,   1, 0, 0 },  // 8
               { 5, 0, 0,   0, 0, 1,   0, 0, 0 },  // 9
            // |-------------------------------|
            };
*/

/* TEST
    static int[][] inputValues =
            //   1  2  3    4  5  6    7  8  9
            // |-------------------------------|
            {  { 0, 0, 0,   7, 0, 0,   0, 0, 0 },  // 1
               { 0, 7, 0,   0, 0, 0,   0, 0, 0 },  // 2
               { 0, 0, 0,   0, 0, 0,   0, 0, 0 },  // 3
            // |-------------------------------|
               { 0, 0, 0,   0, 0, 0,   0, 0, 0 },  // 4
               { 0, 0, 0,   0, 0, 0,   0, 0, 0 },  // 5
               { 0, 0, 0,   0, 0, 0,   0, 7, 0 },  // 6
            // |-------------------------------|
               { 0, 0, 0,   0, 0, 0,   0, 0, 0 },  // 7
               { 0, 0, 0,   0, 0, 0,   0, 0, 7 },  // 8
               { 0, 0, 0,   0, 0, 7,   0, 0, 0 },  // 9
            // |-------------------------------|
            };
*/

    public static int[][] getPuzzleData( PuzzleDifficulty difficulty )
    {

        switch( difficulty )
        {
        case EASY:             return( easyValues          );
        case MEDIUM:           return( mediumValues        );
        case HARD:             return( hardValues          );
        case EVIL:             return( evilValues          );
        case EASTER_MONSTER:   return( easterMonsterValues );
        }

        return( emptyValues );

    }

}
